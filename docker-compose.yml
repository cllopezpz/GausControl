services:
  # Aplicación principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: gaus-control-app
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=gaus_control
      - DB_USER=gaus_user
      - DB_PASSWORD=gaus_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - AUTO_START_PROCESSOR=true
    depends_on:
      - database
      - redis
      - mosquitto
    networks:
      - gaus-network
    restart: unless-stopped

  # Base de datos PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: gaus-control-db
    environment:
      POSTGRES_DB: gaus_control
      POSTGRES_USER: gaus_user
      POSTGRES_PASSWORD: gaus_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - gaus-network
    restart: unless-stopped

  # Redis para caché y sesiones
  redis:
    image: redis:7-alpine
    container_name: gaus-control-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gaus-network
    restart: unless-stopped

  # Broker MQTT para IoT
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: gaus-control-mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    networks:
      - gaus-network
    restart: unless-stopped

  # Nginx como proxy reverso (opcional para producción)
  nginx:
    image: nginx:alpine
    container_name: gaus-control-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - gaus-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  mosquitto_data:
  mosquitto_logs:

networks:
  gaus-network:
    driver: bridge
